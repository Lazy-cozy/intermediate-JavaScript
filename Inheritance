When multiple classes share properties or methods, they become candidates for inheritance.

you can create a parent class (also known as a superclass) with properties and methods that multiple child classes (also known as subclasses) share. 
The child classes inherit the properties and methods from their parent class.

class HospitalEmployee {
  constructor(name) {
    this._name = name
    this._remainingVacationDays = 20
  }
  get name() {
    return this._name;
  }
  get remainingVacationDays() {
    return this._remainingVacationDays;
  }
  takeVacationDays(daysOff){
    this._remainingVacationDays -= daysOff;
  }
}



The extends keyword makes the methods of the class
The super keyword calls the constructor of the parent class.
To avoid reference errors, it is best practice to call super on the first line of subclass constructors

class HospitalEmployee {
  constructor(name) {
    this._name = name;
    this._remainingVacationDays = 20;
  }
  
  get name() {
    return this._name;
  }
  
  get remainingVacationDays() {
    return this._remainingVacationDays;
  }
  
  takeVacationDays(daysOff) {
    this._remainingVacationDays -= daysOff;
  }
}

class Nurse extends HospitalEmployee {
  constructor(name, certifications) {
    super(name);
    this._certifications = certifications;
  }
  get certifications() {
    return this._certifications
  }
  
  addCertification(newCertification){
      this._certifications.push(newCertification)
  }
}

const nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);
nurseOlynyk.takeVacationDays(5);
console.log(nurseOlynyk.remainingVacationDays);
nurseOlynyk.addCertification('Genetics');
console.log(nurseOlynyk.certifications);

the extends keyword brings all of the parentâ€™s getters and methods into the child class,








