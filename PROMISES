Promises are objects that represent the eventual outcome of an asynchronous operation
 promise as settled if it is no longer pending— it is either fulfilled or rejected
 
 const executorFunction = (resolve, reject) => { };
const myFirstPromise = new Promise(executorFunction);

resolve is a function with one argument. Under the hood, if invoked, 
resolve() will change the promise’s status from pending to fulfilled, 
and the promise’s resolved value will be set to the argument passed into resolve().

reject is a function that takes a reason or error as an argument. Under the hood, if invoked,
reject() will change the promise’s status from pending to rejected, 
and the promise’s rejection reason will be set to the argument passed into reject().


const inventory = {
  sunglasses: 1900,
  pants: 1088,
  bags: 1344
};

// Write your code below:
const myExecutor = (resolve, reject) => {
    if (inventory.sunglasses > 0) {
        resolve('Sunglasses order processed.');
    } else {
        reject('That item is sold out.');
    }
};

const orderSunglasses = () => {
    return new Promise(myExecutor);
};

const orderPromise = orderSunglasses();

console.log(orderPromise);                      
